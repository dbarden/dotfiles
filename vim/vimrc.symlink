if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
	set fileencodings=ucs-bom,utf-8,latin1
endif

highlight Normal guibg=black
highlight Normal guifg=white
set gfn=DejaVu\ Sans\ Mono\ Bold\ 10

call pathogen#infect()

set nocompatible		" Use Vim defaults (much better!)
set bs=indent,eol,start	" allow backspacing over everything in insert mode
set ai					" always set autoindenting on
"set backup				" keep a backup file
set viminfo='20,\"50	" read/write a .viminfo file, don't store more
						" than 50 lines of registers
set history=50			" keep 50 lines of command line history
set ruler				" show the cursor position all the time
set bg=dark
"set mouse = a
set noerrorbells
set tabstop=4
set shiftwidth=4
set softtabstop=4
set textwidth=80
set smartcase           " Do smart case matching
set incsearch           " Incremental search
set autowrite           " Automatically save before commands like :next and :make
set laststatus=2        " Required by Powerline
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'

Bundle 'gmarik/vundle'
Bundle 'altercation/vim-colors-solarized'
Bundle 'Lokaltog/vim-powerline'
Bundle 'scrooloose/nerdtree'
Bundle 'fholgado/minibufexpl.vim'
Bundle 'mileszs/ack.vim'
Bundle 'vim-scripts/TaskList.vim'
Bundle 'vim-scripts/taglist.vim'
Bundle 'scrooloose/syntastic'
Bundle 'tpope/vim-fugitive'

filetype plugin indent on

"The following alternative may be less obtrusive.
"highlight ExtraWhitespace ctermbg=darkgreen guibg=lightgreen
" Try the following if your GUI uses a dark background.
highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red

match ExtraWhitespace /\s\+$/
match ExtraWhitespace /\s\+$\| \+\ze\t/
match ExtraWhitespace /[^\t]\zs\t\+/
match ExtraWhitespace /^\t*\zs \+/

autocmd BufWinEnter * match ExtraWhitespace /^\s* \s*\|\s\+$/

nnoremap <silent> <F2> :bp <CR>
nnoremap <silent> <F3> :bn <CR>
nnoremap <silent> ] <C-]> <CR>
nnoremap <silent> [ <C-t> <CR>

" MiniBuf Explorer options
let g:miniBufExplForceSyntaxEnable = 0
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1

" Only do this part when compiled with support for autocommands
if has("autocmd")
	augroup fedora
		autocmd!
		" In text files, always limit the width of text to 78 characters
		autocmd BufRead *.txt set tw=78
		" When editing a file, always jump to the last cursor position
		autocmd BufReadPost *
		\ if line("'\"") > 0 && line ("'\"") <= line("$") |
		\   exe "normal! g'\"" |
		\ endif
		" don't write swapfile on most commonly used directories for NFS mounts or USB sticks
		autocmd BufNewFile,BufReadPre /media/*,/mnt/* set directory=~/tmp,/var/tmp,/tmp
		" start with spec file template
		autocmd BufNewFile *.spec 0r /usr/share/vim/vimfiles/template.spec
		autocmd FileType *			set formatoptions=tcql nocindent comments&
		autocmd FileType python set omnifunc=pythoncomplete#Complete
		autocmd FileType c,cpp,h	au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
	augroup END
endif

if has("cscope") && filereadable("/usr/bin/cscope")
	set csprg=/usr/bin/cscope
	set csto=0
	set cst
	set nocsverb
	" add any database in current directory
	if filereadable("cscope.out")
	cs add cscope.out
	" else add database pointed to by environment
	elseif $CSCOPE_DB != ""
		cs add $CSCOPE_DB
	endif
	set csverb
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
	syntax on
	set hlsearch
endif


if &term=="xterm"
	set t_Co=8
	set t_Sb=^[4%dm
	set t_Sf=^[3%dm
endif

" NerdTree
noremap <silent> <F10> :NERDTreeToggle<CR>
" --------------------
" TaskList
" --------------------
map T :TaskList<CR>
" --------------------
" TagList
" --------------------
" F4: Switch on/off TagList
noremap <silent> <F4> :TlistToggle<CR>
" TagListTagName - Used for tag names
highlight MyTagListTagName cterm=bold ctermfg=white ctermbg=blue gui=bold guifg=Black guibg=Orange
" TagListTagScope - Used for tag scope
highlight MyTagListTagScope cterm=NONE ctermfg=blue gui=NONE guifg=Blue
" TagListTitle - Used for tag titles
highlight MyTagListTitle cterm=bold ctermfg=green gui=bold guifg=DarkRed guibg=LightGray
" TagListComment - Used for comments
highlight MyTagListComment ctermfg=cyan guifg=DarkGreen
" TagListFileName - Used for filenames
highlight MyTagListFileName cterm=bold ctermfg=yellow gui=bold guifg=Black guibg=LightBlue

let Tlist_Ctags_Cmd = '/usr/local/bin/ctags'	" location of ctags tool
let Tlist_Show_One_File = 0				" Displaying tags for only one file~
let Tlist_Exist_OnlyWindow = 1			" if you are the last, kill yourself
"let Tlist_Use_Left_Window = 1			" split to the right side of the screen
let Tlist_Use_Right_Window = 1			" split to the right side of the screen
let Tlist_Sort_Type = "order"			" sort by order or name
let Tlist_Display_Prototype = 0			" do not show prototypes and not tags in the taglist window.
let Tlist_Compart_Format = 1			" Remove extra information and blank lines from the taglist window.
let Tlist_GainFocus_On_ToggleOpen = 1	" Jump to taglist window on open.
let Tlist_Display_Tag_Scope = 1			" Show tag scope next to the tag name.
let Tlist_Close_On_Select = 0			" Close the taglist window when a file or tag is selected.
let Tlist_Enable_Fold_Column = 0		" Don't Show the fold indicator column in the taglist window.
let Tlist_WinWidth = 40

let g:ctags_statusline = 1
let g:ctags_args = 1
let g:ctags_title = 1
"let generate_tags=1
let g:ctags_regenerate = 1

" let Tlist_Ctags_Cmd = 'ctags --c++-kinds=+p --fields=+iaS --extra=+q --languages=c++'
" very slow, so I disable this
" let Tlist_Process_File_Always = 1	" To use the :TlistShowTag and the :TlistShowPrototype commands without
"									" the taglist window and the taglist menu, you should set this variable to 1.
":TlistShowPrototype [filename] [linenumber]

" --------------------
" MiniBufExpl
" --------------------
let g:miniBufExplTabWrap = 1		" make tabs show complete (no broken on two lines)
let g:miniBufExplModSelTarget = 1	" If you use other explorers like TagList you can (As of 6.2.8) set it at 1:
let g:miniBufExplUseSingleClick = 1 " If you would like to single click on tabs rather than double clicking on them to
									" goto the selected buffer.
let g:miniBufExplMaxSize = 1		" <max lines: defualt 0> setting this to 0 will mean the window gets as big as needed
									" to fit all your buffers.
"let g:miniBufExplForceSyntaxEnable = 1	" There is a Vim bug that can cause buffers to show up without their highlighting.
"										" The following setting will cause MBE to
"let g:miniBufExplorerMoreThanOne = 1	" Setting this to 0 will cause the MBE window to be loaded even
"let g:miniBufExplMapCTabSwitchBufs = 1
"let g:miniBufExplMapWindowNavArrows = 1

"for buffers that have NOT CHANGED and are NOT VISIBLE.
"highlight MBENormal guibg=LightGray guifg=DarkGray
" for buffers that HAVE CHANGED and are NOT VISIBLE
"highlight MBEChanged guibg=Red guifg=DarkRed
" buffers that have NOT CHANGED and are VISIBLE
"highlight MBEVisibleNormal term=bold cterm=bold gui=bold guibg=Gray guifg=Black
" buffers that have CHANGED and are VISIBLE
"highlight MBEVisibleChanged term=bold cterm=bold gui=bold guibg=DarkRed guifg=Black

" use solarized by default
set background=dark
let g:solarized_termcolors=256
colorscheme solarized
